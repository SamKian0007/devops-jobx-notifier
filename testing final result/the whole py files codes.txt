# app.py
from flask import Flask, render_template, session, url_for, redirect, request
from dotenv import load_dotenv

from application.jobs_dataframe import devops_jobs_dataframe
from application.dataframe_plot import jobs_devops_plot
from application.dataframe_devops import jobs_devops_formated
from application.search_with_filters import bp as filters_bp
from application.local_search import render_local_search_page
from application.notify import send_devops_jobs_update
from application.login import bp as auth_bp
import os

load_dotenv()

app = Flask(__name__)
# needed for session/flash
app.secret_key = os.getenv("SECRET_KEY", "change-me")
app.register_blueprint(auth_bp)
app.register_blueprint(filters_bp)


@app.get("/")
def home():
    return render_template("home.html")


@app.get("/login")
def login():
    if not session.get("logged_in"):
        return redirect(url_for("auth.login"))
    return render_template("login.html", title="login", header="Job Explorer !")


@app.get("/jobs/filter")
def jobs_filter():
    return render_template("jobs_filter.html", title="Filter Jobs", header="Filter Jobs")


@app.get("/jobs/devops")
def jobs_devops():
    keyword = request.args.get("keyword", "devops")
    return jobs_devops_formated(keyword)


@app.get("/jobs/devops/local-search")
def jobs_devops_local_search():
    return render_local_search_page()


@app.get("/jobs/devops/plot")
def view_plot():
    return jobs_devops_plot()


@app.post("/jobs/devops/notify")
def notify_users():
    df = devops_jobs_dataframe("devops", 50)
    return send_devops_jobs_update(df)


if __name__ == "__main__":
    app.run(debug=True)

----------------
# application/dataframe_devops.py
from flask import render_template, request
import plotly.express as px
import plotly.io as pio
from application.jobs_dataframe import devops_jobs_dataframe


def jobs_devops_formated(keyword="devops"):
    df = devops_jobs_dataframe(keyword, 50)
    table_html = df.to_html(
        classes="table table-striped table-bordered table-hover align-middle",
        index=False,
        border=0
    )
    return render_template(
        "devops.html",
        title=f"Open jobs for {keyword.title()}",
        header=f"{keyword.title()} Jobs",
        table_html=table_html,
    )



-------------------------
# application/dataframe_plot.py
from flask import render_template, request
import plotly.express as px
import plotly.io as pio
from application.jobs_dataframe import devops_jobs_dataframe


def jobs_devops_plot():
    df = devops_jobs_dataframe("devops", 50)

    chart_html = ""
    if not df.empty:
        city_counts = (
            df.assign(City=df["City"].fillna("Unknown"))
              .groupby("City")
              .size()
              .reset_index(name="Jobs")
              .sort_values("Jobs", ascending=False)
              .head(7)
        )

        fig = px.bar(city_counts, x="City", y="Jobs",
                     title="DevOps job ads by city (top 7)",
                     color="City")
        fig.update_layout(
            xaxis_title=" ",
            yaxis_title="Jobs",
            xaxis=dict(tickangle=0, title_standoff=5),
            margin=dict(l=4, r=4, t=40, b=4),
            legend=dict(orientation="v", x=1.02, y=1),
        )

        chart_html = pio.to_html(fig, full_html=False, include_plotlyjs="cdn")

    table_html = df.to_html(
        classes="table table-striped table-bordered table-hover align-middle text-center",
        index=False,
        border=0
    )
    message = "Emails sent to the recipients list." if request.args.get(
        "sent") == "1" else None

    return render_template(
        "devops_plot.html",
        title="DevOps Jobs",
        header="DevOps Engineering Jobs",
        table_html=table_html,
        chart_html=chart_html,
        message=message,
    )

--------------------------

# application/jobs_dataframe.py
import os
import pandas as pd
from application.services_providers.jsearch import fetch_jobs

DATA_PATH = os.path.join("data", "devops_jobs.json")


def devops_jobs_dataframe(keyword: str = "devops", limit: int = 50) -> pd.DataFrame:
    hits = fetch_jobs(keyword, limit)
    rows = [{
        "Title": h.get("headline"),
        "Employer": h.get("employer", {}).get("name"),
        "City": h.get("workplace_address", {}).get("municipality"),
        "Published": h.get("publication_date"),
        "Employment": h.get("employment_type", {}).get("label"),
        "Duration": h.get("duration", {}).get("label"),
        "Experience Required": h.get("experience_required"),
        "Apply URL": h.get("webpage_url"),
    } for h in hits]
    df = pd.DataFrame(rows)

    # ✅ Save dataframe to JSON file (for later local filtering)
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    df.to_json(DATA_PATH, orient="records", indent=2)

    return df


def search_local_jobs(keyword: str = "") -> pd.DataFrame:
    """Search locally saved jobs (in /data/devops_jobs.json) by keyword across all columns."""
    if not os.path.exists(DATA_PATH):
        # Return empty DataFrame if file not yet created
        return pd.DataFrame()

    df = pd.read_json(DATA_PATH)
    if not keyword:
        return df  # if no keyword, return all

    keyword_lower = keyword.lower()

    # Create a mask that checks if any column contains the keyword
    mask = df.apply(lambda col: col.astype(
        str).str.lower().str.contains(keyword_lower, na=False))
    filtered_df = df[mask.any(axis=1)]

    return filtered_df


-------------------------
# local_search.py    

import os
import pandas as pd
from flask import render_template, request

# Reuse the same saved JSON path as in jobs_dataframe.py
DATA_PATH = os.path.join("data", "devops_jobs.json")


def search_local_jobs(keyword: str = "") -> pd.DataFrame:
    """Search locally saved jobs by keyword across all columns."""
    if not os.path.exists(DATA_PATH):
        return pd.DataFrame()  # No saved file yet

    df = pd.read_json(DATA_PATH)
    if not keyword:
        return df

    keyword_lower = keyword.lower()
    mask = df.apply(lambda col: col.astype(
        str).str.lower().str.contains(keyword_lower, na=False))
    filtered_df = df[mask.any(axis=1)]
    return filtered_df


def render_local_search_page():
    """Flask view logic: get keyword, filter DataFrame, render HTML."""
    keyword = request.args.get("keyword", "").strip()
    df = search_local_jobs(keyword)

    table_html = df.to_html(
        classes="table table-striped table-bordered table-hover align-middle",
        index=False,
        border=0
    )

    return render_template(
        "devops.html",
        title=f"Local Search Results for '{keyword or 'All'}'",
        header=f"Local Search: {keyword or 'All Jobs'}",
        table_html=table_html,
    )


-------------------

# login.py


import os
from flask import Blueprint, request, redirect, url_for, flash, session
from dotenv import load_dotenv
load_dotenv()  # keep as-is

ENV_USER = os.getenv("APP_USERNAME", "")
ENV_PASS = os.getenv("APP_PASSWORD", "")

bp = Blueprint("auth", __name__)


@bp.post("/login")
def login():
    u = request.form.get("username", "")
    p = request.form.get("password", "")
    if u == ENV_USER and p == ENV_PASS:
        session["logged_in"] = True
        session["username"] = u
        flash("Logged in successfully.", "success")
        return redirect(url_for("login"))
    else:
        flash("Invalid username or password.", "error")
        return redirect(url_for("home"))


@bp.get("/logout")
def logout():
    session.pop("logged_in", None)
    session.pop("username", None)
    flash("Logged out.", "info")
    return redirect(url_for("home"))

-------------------
# application/notify.py

from __future__ import annotations
import pandas as pd
from application.services_providers.send_email import send_email

def send_devops_jobs_update(df: pd.DataFrame) -> tuple[str, int]:
    """
    Pure function that sends the DevOps jobs summary email based on a DataFrame.
    Returns the same Flask-style response tuple used by the route.
    """
    if df.empty:
        send_email("DevOps Jobs Update", "<p>No jobs found.</p>")
        return ("", 204)

    summary = (
        df["City"]
        .fillna("Unknown")
        .value_counts()
        .reset_index()
        .rename(columns={"index": "City", "City": "Jobs"})
        .head(10)
    )

    summary_html = summary.to_html(index=False, border=1)

    html_body = f"""
    <h2>DevOps Jobs Summary</h2>
    <p>Top 10 cities by number of job ads:</p>
    {summary_html}
    <br>
    <p>Total jobs analyzed: <b>{len(df)}</b></p>
    """

    send_email("DevOps jobs update from Job Explorer", html_body)
    return ("", 204)


-----------------------

from flask import Blueprint, render_template, request
from application.jobs_dataframe import devops_jobs_dataframe

bp = Blueprint("filters", __name__, url_prefix="/jobs")


@bp.get("/filter")
def jobs_filter():
    keyword = request.args.get("keyword", "devops").strip()
    location = request.args.get("location", "").strip()
    remote = request.args.get("remote", "")
    limit_arg = request.args.get("limit", "20")

    # ✅ Validate numeric input
    try:
        limit = max(1, min(int(limit_arg), 100))
    except ValueError:
        limit = 20  # default if invalid input

    # ✅ Fetch jobs
    try:
        df = devops_jobs_dataframe(keyword, limit+1)
    except Exception as e:
        df = None
        print(f"Error fetching jobs: {e}")

    # ✅ Filter
    if df is not None and not df.empty:
        if location:
            df = df[df["City"].str.contains(location, case=False, na=False)]
        if remote.lower() == "true":
            df = df[df["Employment"].str.contains(
                "remote", case=False, na=False)]
        elif remote.lower() == "false":
            df = df[~df["Employment"].str.contains(
                "remote", case=False, na=False)]

        table_html = df.to_html(
            classes="table table-striped table-bordered table-hover align-middle text-center",
            index=False,
            border=0
        )
    else:
        table_html = "<p class='text-muted'>No results found or invalid input.</p>"

    return render_template(
        "jobs_filter.html",
        title="Filter Jobs",
        header=" ",
        table_html=table_html
    )

-----------------------------------------

